version: '3.9'
services:
  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "0520"
      POSTGRES_DB: "ostock_dev"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  configserver:
    build:
      context: configserver
      dockerfile: Dockerfile
    ports:
      - "9091:9091"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    build:
      dockerfile: Dockerfile
      context: eurekaserver
    environment:
      SPRING_PROFILES_ACTIVE: dev
    ports:
      - "9999:9999"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"
  licensingservice:
    build:
      context: licensing-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "9090:9090"
    networks:
      - backend
  organizationservice:
    build:
      context: organization-service
      dockerfile: Dockerfile
    environment:
      SPRING_PROFILES_ACTIVE: dev
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "9094:9094"
    networks:
      - backend

  keycloak:
    image: jboss/keycloak
    restart: always
    environment:
      KEYCLOAK_VERSION: 16.1.1
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
    volumes:
      - ./realm-export.json:/opt/jboss/keycloak/realm-export.json
    command:
      - "-b 0.0.0.0"
      - "-Dkeycloak.import=/opt/jboss/keycloak/realm-export.json"
      - "-Dkeycloak.profile.feature.scripts=enabled"
      - "-Dkeycloak.profile.feature.upload_scripts=enabled"
    ports:
      - "8080:8080"
    networks:
      backend:
        aliases:
          - "keycloak"

  zookeeper:
    image: confluentinc/cp-zookeeper:5.1.2
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
      ZOOKEEPER_SERVERS: "zookeeper:22888:23888"
    ports:
      - "2181:2181"
  kafka1:
    image: confluentinc/cp-enterprise-kafka:5.1.2
    depends_on:
      - zookeeper
    ports:
      # Exposes 29092 for external connections to the broker
      # Use kafka1:9092 for connections internal on the docker network
      # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
      - "19092:19092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092,PLAINTEXT_HOST://localhost:19092
      KAFKA_BROKER_ID: 1
      KAFKA_BROKER_RACK: "r1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#      KAFKA_SCHEMA_REGISTRY_URL: "schemaregistry:8085"
      KAFKA_CREATE_TOPICS: dresses:1:1,ratings:1:1
      #KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_JMX_PORT: 9991
  redisserver:
    image: redis:alpine
    ports:
      - 6379:6379
    networks:
      backend:
        aliases:
          - "redis"

networks:
  backend:
    driver: bridge